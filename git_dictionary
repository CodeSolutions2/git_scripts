
------------------------------
git --version
------------------------------


------------------------------
git add filename.txt   # Put changes in the staging area for the next commit

git add -p  # mettre des changements dans la zone de transit, allows a user to interactively review patches to add to the current commit, staged changes

git add *   # Mettre des fichiers dans l'arborescence de travail que vous avez changé, qui sont deja dans la zone de transit, dans la zone de transit

git add -A  # Mettre des fichiers non-suivi et suivi dans la zone de transit

git add .     # if you want to add everything in the local repository, that was specified in the config file (in short, add all the files)
------------------------------


------------------------------
git bisect start   # Outils de debougeage : chercher des changements entre deux commits different pour trouver un bogue dans l'arbre

git bisect bad                 # La version actuelle est mauvaise
git bisect bad SHA_ID_ou_tag

git bisect good SHA_ID_ou_tag

- Tester tes codes, si le code fonction entre 'git bisect good', si non entre 'git bisect bad'. Apres entre 'git bisect'. Continuez à répéter le processus : compiler l’arbre, le tester, et selon qu’il est bon ou mauvais lancer git bisect good ou git bisect bad pour demander le prochain commit qui a besoin d’être testé.
------------------------------


------------------------------
git branch   # voir des branches

git branch new-feature    # créer une nouvelle branches il s'appele new-feature

git branch -r       # voir des branches distantes dans le repo, on ne peut pas modifier des branches parce que c'est en lecture seule

git branch -merged    # lister des branches qu'etaient fusionné dans la branche actuelle
------------------------------


------------------------------
git checkout   # voir toutes des branches d'arbre de travail

git checkout nomDEfichier.ext  # supprimer des vraies changements dans le fichier nomDEfichier.ext jusqu'a le commit precedent OU jetter des changements 'unstaged' dans des fichiers modifiés

git checkout nomDEbranche   	# changer la branche à la branche nommé nomDEfichier

git checkout -b nomDEbranchenouvelle   # créer une nouvelle branche d'une branche actuelle et on change à la nouvelle branche
------------------------------


------------------------------
git clone URL       Git clone is used to clone a remote repository into a local workspace. Il crée le fichier .git automatiqement, donc on n'a pas besoin de faire 'git init' pour initialiser le directoire

git clone https://github.com/MicrosoftDocs/ml-basics.git

------------------------------


------------------------------
git commit -m "commit message"  # commit des fichiers qui on a ajouté dans la zone de transit

git commit -a -m "message"  # commit des fichiers qui on a déjà ajouté être suivi, on n'a pas besoin de faire "git add"

git commit --amend     # Modifier et ajouter des changements au commit qui ont été fait plus recent (ajouter un message pour le fichier actuelle et le fichier commité juste avant)
------------------------------


------------------------------
git config --list --show-origin     # Voir Git settings file on the PC

git config -l      # lister le configuration actuelle

git config --global remote.origin.url https://github.com/j622amilah/Son_des_oiseaux2.git (for URL)
git config --global remote.origin.url git@github.com:j622amilah/Programming_Language_Resume.git (for SSH)
git config --global remote.origin.url https://github.com/j622amilah/code4travail
git config --global remote.origin.url https://github.com/MicrosoftDocs/ml-basics/tree/master/challenges.git
git config --global remote.origin.url https://github.com/j622amilah/userservicesite.git


git config --global user.email "address@gmail.com"
git config --global user.email "j622amilah@gmail.com"

git config --global user.name "First Lastname"   # --global means we set different values for different repositories
git config --global user.name "j622amilah"

git config --global credential.helper cache  # utiliser un assistant d'identification qui met en cache nos informations d'identification pour une fenêtre de temps


// If one removes data from a file it may give an error, saying "You have divergent branches and need to specify how to reconcile them". Thus, one needs to tell Git to accept the changes either by: 0) combining the current and previous file contents into the new file (merge), 1) accepting the file that was changed last by chronological order (rebase), [2] selecting a combination of the latest changes on the main branch and the latest changes on your branch (fast-forward).
git config --global pull.rebase false # merge (the default strategy)
git config --global pull.rebase true  # rebase
git config --global pull.ff only 

You can replace "git config" with "git config --global" to set a default preference for all repositories. You can also pass --rebase, --no-rebase, or --ff-only on the command line to override the configured default per invocation.


// Remove the git.recentrepo
git config --global --unset-all gui.recentrepo

------------------------------


------------------------------
git diff  # diff -u equivalent, Regarder les differences des changements du repositorie

git diff --staged  # Regarder les differences des changements de la zone de transit

git diff -cached nomDEfichier   # Regarder les differences des changements du fichier qui est dans la zone de transit

git diff nomDEfichier  # Voir des differences entre des versions de fichier depuis le dernière commit
------------------------------


------------------------------
git fetch   # pour synchroniser les données, c'est copie les commits effectués dans le référentiel distant vers les branches distantes. On peut voir toutes des commits que d'autres personnes ont commis. Le contenu récupéré est téléchargé dans les branches distantes de notre référentiel. Il n'est donc pas automatiquement reflété dans nos succursales locales. 

get fetch --all
------------------------------


------------------------------
git help commandName
------------------------------


------------------------------
git init  # initialize the current directory by creating a .git file in the folder. The .git file contains information about the GitHub directory that is pulled or pushed.
------------------------------


------------------------------
git log  			# Lister des commits qui vous avez fait 

git log -p  # diff -u equivalent, Voir des changements qui étaitent fait au repository (des changements au toutes les fichiers)

git log --stat  # Montre des statistics sur des changements dans le commit (ie: laquelle fichiers ont été changés et combine des lignes ont été ajoutés ou supprimés)

git log --graph --oneline     # Voir une histoire court des commits pour un repo, il mont une ligne par commit

git log -p -2   # look at last two entries in the log
------------------------------


------------------------------
git merge nomDEbranche      # fusionner nomDEbranche branche dans la branche maître.  Merge signifie qu'il fusione des donnes et histories ensembles, il ajoute un node apres le deux branches pour collecter l'information

git merge --abort  # to cancel the merge (supprimer le fusion precedent), because the merge conflicts are too tricky, complicated, and numerous. This will stop the merge and reset the files in your working tree back to the previous commit before the merge ever happened. 

git merge origin/master     # fusionner la branche origine/master (le remote repo) dans notre branche principale locale

git merge --squash nomDEbranche  # consolider plusieurs commits dans un single commit  

// Fast-forward: selecting a combination of the latest changes on the main branch and the latest changes on your branch, without creating a merge commit.
git checkout main
git pull
git checkout my-feature
git merge main --ff-only
------------------------------


------------------------------
git mv nomDEfichierSOURCE nomDEfichierDESTINATION # rename a file (but, changes are only staged)
------------------------------


------------------------------
git pull		# Fetch the newest updates from a remote repository
------------------------------


------------------------------
git push -u origin master  # -u sets the upstream branch for the current branch, push the changes to the [branch named master that already exists on GitHub, but the PC knows as the name master] and to the [URL defined as origin in the configuration file OR set using "git remote add origin $URL"]  

git push origin branch_name:master  # pousser une branche qu'on a changé sur le locale repo ver le remote repo

git push 		# push commits from your local repo to a remote repo

git push -f    # Pousser des changements par force du repo locale ver le repo remote, recopie sur des fichiers 

To push the current branch and set the remote as upstream
git push --set-upstream origin main
------------------------------


------------------------------
git rebase nomDEbranche  # arranger des commit dans le sense chronologique/lineare

git rebase -i HEAD~3   # interactive rebase screen du derirre 3 commits
------------------------------


------------------------------
git remote - v    # Voir l'addresse de référentiel/URL distant pour le repositorie

git remote show origin    # obtenir plus d'informations sur le repo remote (télécommande)

git remote add origin URL    # si vous avez créé un repo locale sans "git clone", ajouter le URL du repo remote comme un repo sur GitHub dans le fichier du configuration

git remote add new
------------------------------


------------------------------
git rerere   # reuse recorded resolution (« ré utiliser les ré solutions en re gistrées »)

exemple : 1) il y a un fichier hello.rb, 2) quelqu'un a créé une branche i18-world et il a écrit 'hello mundo', 3) quelqu'un a changé le fichier sur la branche maître et il a écrit 'hola world', 4) sur la branche maître on fait 'git merge i18n-world' (il y a un conflit de fusion), 5) On veut voir le conflit : git status, git rerere status, git rerere diff 


git config --global rerere.enabled true   # activer la fonctionnalité rerere dans le fichier de la configuration
------------------------------


------------------------------
git reset HEAD nomDEfichier   # to remove the file from the staging area (make file untracked)

git reset nomDEfichier   # supprimer l'indexe et fichier de la zone de transit

git reset -hard nomDEfichier  # supprimer des changements depuis le commit precedant, c'est includé l'indexe et le changement au HEAD

git reset -soft HEAD^ nomDEfichier    # supprimer des changements depuis le commit precedant, mais il laisse le command dans l'indexe/zone de transit; il fait des changements au HEAD seulement

Si vous avez fait un erreur
git reset *
------------------------------


------------------------------
git revert    # creates a commit that contains the inverse of  all the changes made in the bad commit in order to cancel them out
------------------------------


------------------------------
git rm   # supprimer des fichiers du repositorie

get rm -cached nomDEficher   # supprimer nomDEfichier de la zone de transit et n'enregistez pas des changements
------------------------------


------------------------------
git show SHA_ID   # Pour chaque commit ID, c'est montre des informations sur le commit et le chemin (for each commit ID, it displays information about the commit and the path) Obtenir l'ID avec git log -p
------------------------------


------------------------------
git status    # L'état de nos changements : lister des branches, lister des fichiers que sont dans la zone de transit, suivi, et non-suivi
------------------------------


------------------------------
git stash   # créer un entrie OU enregister temporariement le travail qu'on a fait sur une branche 

git stash pop    # mettre l'entrie de stash dans le directoire actuelle

git stash drop   # supprimer le stash plus recente
------------------------------


------------------------------
git tag nomDEversion   # (ie : git tag v3.8.1) créer un tag court(lightweight)
------------------------------
